// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MetaMaskInfo {
    address public owner;

    struct Feedback {
        uint8 rating; // Rating from 1 to 5
        string comment;
    }

    mapping(address => Feedback[]) public userFeedbacks;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function");
        _;
    }


    function submitFeedback(uint8 _rating, string memory _comment) public {
        require(_rating >= 1 && _rating <= 5, "Invalid rating, please choose between 1 and 5");
        require(bytes(_comment).length > 0, "Comment cannot be empty");

        userFeedbacks[msg.sender].push(Feedback(_rating, _comment));
 }

    function getUserFeedbackCount(address _user) public view returns (uint256) {
        return userFeedbacks[_user].length;
    }

    function getUserFeedback(address _user, uint256 _index) public view returns (uint8, string memory) {
        require(_index < userFeedbacks[_user].length, "Invalid feedback index");
        Feedback memory feedback = userFeedbacks[_user][_index];
        return (feedback.rating, feedback.comment);
    }
}
